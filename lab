lab

// TreeNode class
class TreeNode {
    int value;
    TreeNode left, right;

    TreeNode(int value) {
        this.value = value;
    }
}

// Binary Search Tree Operations
public class BinarySearchTree {

    public TreeNode insert(TreeNode node, int value) {
        if (node == null) {
            return new TreeNode(value);
        }

        if (value < node.value) {
            node.left = insert(node.left, value);
        } else if (value > node.value) {
            node.right = insert(node.right, value);
        }

        return node;
    }

    public int iterativeFindMinimum(TreeNode node) {
        if (node == null) return -1;
        while (node.left != null) {
            node = node.left;
        }
        return node.value;
    }

    public int iterativeFindMaximum(TreeNode node) {
        if (node == null) return -1;
        while (node.right != null) {
            node = node.right;
        }
        return node.value;
    }

    public int recursiveFindMinimum(TreeNode node) {
        if (node == null) return -1;
        if (node.left == null) return node.value;
        return recursiveFindMinimum(node.left);
    }

    public int recursiveFindMaximum(TreeNode node) {
        if (node == null) return -1;
        if (node.right == null) return node.value;
        return recursiveFindMaximum(node.right);
    }

    public TreeNode findElement(TreeNode node, int target) {
        if (node == null || node.value == target) return node;

        if (target < node.value) {
            return findElement(node.left, target);
        } else {
            return findElement(node.right, target);
        }
    }

    public int countNodes(TreeNode node) {
        if (node == null) return 0;
        return 1 + countNodes(node.left) + countNodes(node.right);
    }

    public int countLeaves(TreeNode node) {
        if (node == null) return 0;
        if (node.left == null && node.right == null) return 1;
        return countLeaves(node.left) + countLeaves(node.right);
    }

    // Task 1: Vowel checker
    public static boolean hasMoreVowels(String str) {
        return countVowels(str.toLowerCase(), 0, 0, 0);
    }

    private static boolean countVowels(String str, int index, int vowelCount, int consonantCount) {
        if (index == str.length()) {
            return vowelCount > consonantCount;
        }

        char ch = str.charAt(index);
        if (Character.isLetter(ch)) {
            if (isVowel(ch)) {
                vowelCount++;
            } else {
                consonantCount++;
            }
        }

        return countVowels(str, index + 1, vowelCount, consonantCount);
    }

    private static boolean isVowel(char ch) {
        return "aeiou".indexOf(ch) != -1;
    }

    // Task 2: Recursive linear search
    public static int recursiveLinearSearch(int[] arr, int index, int target) {
        if (index >= arr.length) {
            return -1;
        }
        if (arr[index] == target) {
            return index;
        }
        return recursiveLinearSearch(arr, index + 1, target);
    }
}

Main:

public class Main {
    public static void main(String[] args) {
        // Task 1: Vowel checker
        String testStr = "Education";
        System.out.println("Task 1: Has more vowels than consonants? " +
                BinarySearchTree.hasMoreVowels(testStr));

        // Task 2: Recursive linear search
        int[] arr = {4, 7, 1, 3, 9};
        int target = 3;
        System.out.println("Task 2: Target " + target + " found at index: " +
                BinarySearchTree.recursiveLinearSearch(arr, 0, target));

        // Task 3: BST operations
        BinarySearchTree bst = new BinarySearchTree();
        TreeNode root = null;
        int[] values = {10, 5, 15, 3, 7, 13, 18};

        for (int val : values) {
            root = bst.insert(root, val);
        }

        System.out.println("Task 3: Min (Iterative): " + bst.iterativeFindMinimum(root));
        System.out.println("Task 3: Max (Iterative): " + bst.iterativeFindMaximum(root));
        System.out.println("Task 3: Min (Recursive): " + bst.recursiveFindMinimum(root));
        System.out.println("Task 3: Max (Recursive): " + bst.recursiveFindMaximum(root));

        TreeNode found = bst.findElement(root, 7);
        System.out.println("Task 3: Found node with value 7: " + (found != null ? "Yes" : "No"));

        System.out.println("Task 3: Total Nodes: " + bst.countNodes(root));
        System.out.println("Task 3: Total Leaves: " + bst.countLeaves(root));
    }
}
